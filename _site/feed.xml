<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-03T00:29:23+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Raktim Tech Updates</title><subtitle>Quality Engineering manager | Test Architect | Tools &amp; Frameworks | SDET | Full Stack Test Automation Development Consultant |Engg. Productivty |Mentor |</subtitle><entry><title type="html">Best practices for Test Automation Framework</title><link href="http://localhost:4000/2022/12/02/SDET-blog.html" rel="alternate" type="text/html" title="Best practices for Test Automation Framework" /><published>2022-12-02T11:12:08+05:30</published><updated>2022-12-02T11:12:08+05:30</updated><id>http://localhost:4000/2022/12/02/SDET-blog</id><content type="html" xml:base="http://localhost:4000/2022/12/02/SDET-blog.html"><![CDATA[<h1>Introduction</h1>
<p>With the digital revolution, demands have been increased for the softwares to be delivered to the end users at the earliest. However, it is very important to release a bug free application into the market else the business will have to face brunt. Hence, it is essential to automate the checks and test the application thoroughly before releasing it.</p>

<p>Automation testing makes the testers life easier as the code once written for regression tests can be repeated again and again for rechecking without putting in manual efforts. This saves time and money and also builds in confidence for releasing the application into production with quality.</p>

<p>Regression tests are very much required to be performed as it helps us in knowing the quality of the build against the recent changes made to the application, be it a website or mobile application. And if this is performed using automated tests it can heavily decrease the testing time. A small functionality of testing a CRUD operation of an application might require 5-10 mins of Manual Tester’s time while the same could be tested using Automated Regression tests within 20 seconds approximately.</p>

<p>Automation testing, however, requires, right set of tools, test automation frameworks, technical expertise and testing teams skillset to get the best results. In this blog, we will learn about the best practices for test automation framework.</p>

<p>But before we move on towards discussing the best practices for automation framework, let’s first understand What is an Automation Framework?</p>

<p>What is an Automation Framework?
Automation frameworks are a set of guidelines related to coding standards, test data management, configuration management, etc which helps in increased code-usage, reduced script maintenance and duplicate codes.</p>

<p>There are no strict rules for an Automation Framework, it is just a guideline which helps in reducing the complexity and makes scripting easier.</p>

<p>Best Practices for Automation Framework
There is no one-size-fits-all answer to this question, as the design of a test automation framework will vary depending on the specific needs of the organization. However, some best practices for test automation framework design include:</p>

<h3>
1. Keep it Simple
</h3>
<p>Don’t try to build a framework that is too complex or that covers too many different types of tests. A good rule of thumb is to keep the framework as simple as possible, while still providing the functionality required by the business. The other side of asking to keep it simple is considering the team’s skill set, as the freshers join in the team, it will help them grasp the framework knowledge easily, which eventually adds to the productivity. Otherwise, extra efforts will be required to be put in to explain the framework which will add up to the training of the new members in the testing team.</p>
<h3>
2. Use a Modular Approach
</h3>

<p>Modular approach is based on the popularly known OOPs concept – Abstraction. This approach should be used so that different parts of the framework can be easily updated as required. This will make it easier to maintain and improve the framework over time. This approach also helps in code reusability.</p>
<h3>
3. Make it extensible
</h3>
<p>As Automation Framework is the foundation for writing automated tests, it should be designed in such a way that it can be easily extended to support new types of tests or new features as and when the need arises. This will make it more flexible and easier to adapt.</p>

<h3>
4. Discuss Tech Stack with the Team Members
</h3>

<p>Before you start working on the Automation Framework, discuss it internally with your team, it will help in evaluating the idea of framework creation and you will have more clarity to start your work with.</p>

<p>Points like the following can be brainstormed with your team:</p>

<p>What Programming language to be used?
Which tool should you opt for – Open Source tool or Commercial?
Should the framework be in the same language as the application is built in?
List out tools that can be used for your framework, like in case of Web Automation whether Selenium WebDriver Or PlayWright Or Cypress?
Touch upon the Pros and Cons of the tools selected and decide which one to go ahead with.
How will the tool be integrated into the CICD Pipeline?
Support to run the tests on a cloud platform.
Conclusions should be made after brainstorming on the above topics collectively with the teams thinking about the overall benefit of the application under test.</p>

<h3>
5. Use standard tools and technologies
</h3>
<p>It is always recommended to use the latest tools and technologies for the framework so that it can be easily maintained and support the framework in the long term. Use Standard tools which are popularly used in the industry, as these tools have a large community, you get quick help in case you get stuck anywhere.</p>
<h3>
6. Do a Proof of Concept before starting with the tools
</h3>
<p>Once the brainstorming is done and tools are decided, it’s better to create a card on the Scrum board for doing a Proof of Concept with the tool to understand the complexity of implementing the tool. Here, Pros and Cons should be noted and accordingly steps should be taken after a team discussion whether to use it for creating a framework or not.</p>
<h3>
7. Separate the Configuration
</h3>
<p>It is recommended to separate the configuration from the framework.</p>

<p>For example, if you are developing a Web Automation framework, values like OS Name and its version and Browser name and its version should be supplied from a separate configuration file so you don’t have to make changes in the Test Runners inside the framework to run different tests.</p>

<p>Also, consider  a scenario where you have to run parallel tests on different browsers – here setting the browsers, its respective versions, etc from the configuration file will be really helpful. And finally, if you want to run the tests locally, or on a cloud platform, again these values can be set using the configuration file itself.</p>
<h3>
8. Reporting
</h3>
<p>Reports are an integral part of an automation framework. Choose a standard reporting tool to be integrated with the framework. It would be good if  the framework is extensible so that it can be plugged in with any reporting tool used widely in the market.</p>

<p>Stakeholders are mostly interested in knowing the data and figures as well the percentage of the tests that are automated. This report should help you out with all the possible figures required.</p>
<h3>
9. Capture the Logs
</h3>
<p>Capturing the logs helps in detecting the errors easily. Logs should be captured accordingly for the actions/events performed by the automation framework. It is suggested to generate appropriate log files for the logs, which can be used for debugging the test failures or framework related errors.</p>
<h3>
10. Document the framework
</h3>
<p>Documenting the framework is a good practice as it helps in easily understanding the framework, how it works and how to use it. Example code with samples should also be provided in the “How To” section.</p>

<p>It will eventually save the time when new joinees enter your team, this document can serve as a guide to them.</p>

<p>Conclusion
In this blog, we learned about the best practices used for creating test automation frameworks.Test Automation can help you deliver the best product to the market by testing your application continuously. Automation Frameworks helps you in organizing and writing the tests, hence it should be created using the best practices followed in the industry.</p>]]></content><author><name>Raktim Sarkar</name></author><summary type="html"><![CDATA[Introduction With the digital revolution, demands have been increased for the softwares to be delivered to the end users at the earliest. However, it is very important to release a bug free application into the market else the business will have to face brunt. Hence, it is essential to automate the checks and test the application thoroughly before releasing it.]]></summary></entry><entry><title type="html">Guide to be a skilled SDET/Test Architect</title><link href="http://localhost:4000/sdet-blog/02/2022/12/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Guide to be a skilled SDET/Test Architect" /><published>2022-12-02T11:12:08+05:30</published><updated>2022-12-02T11:12:08+05:30</updated><id>http://localhost:4000/sdet-blog/02/2022/12/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/sdet-blog/02/2022/12/welcome-to-jekyll.html"><![CDATA[<h1>7-Step guide to be a skilled SDET/QE.</h1>
<p>Plan the transition with these steps and know your WHY ? &amp; HOW ?</p>

<p>QA role is one of those tech roles which has seen a major evolution over the last decade. The expectations, skill requirements as well as the pay packages for quality engineering roles have changed and increased exponentially over a span of 8–10 years</p>

<p>However, a guided roadmap of upgrading our skillset to live upto these evolved expectations is still a mystery to many engineers serving for years in this role as well as to freshers entering the industry.</p>

<p>Around 70% of current QA engineers are looking for a perfect course or mentor who can help them to upskill and crack the role of QE or SDET.</p>

<p><b>
There can be many motivational reasons for this quest including
</b></p>

<p><b>Higher CTC package — </b>The salary range for a qualified QE/SDET has gone up and past the levels of all its contemporary roles.</p>

<p><b>Better job security — </b>Yes , being qualified at your work makes you relatively harder to replace.
More respect and say — Slightly controversial , but yes, having a better insight of tech, automation &amp; new ways to test is bound to gain high respect from your management &amp; stakeholders helping you to make better decisions and work with autonomy.</p>

<p><b>Growth ladder — </b>The skillset &amp; better insight surely opens the ladder for growth within an organisation for both IC and management roles.</p>

<p><b>All of them — </b>This one being the most common answer.</p>

<p><b>| Now let’s break two common myths before jumping on to the steps to become an SDET.  |</b></p>

<p><b>SDET role = ‘Automation’.</b> <i> No it is not.</i> It is very important to burst this bubble since the buzzword of ‘automation’ has set the wrong context among freshers and QA engineers. SDET is much more than automation.</p>

<p><b>QA and SDET are two separate roles . </b>  <i>No they are not.</i>  Do not overwhelm yourself by thinking of it as a major transition into a completely new role. You just need to be better at what you have been already doing till now i.e testing.</p>

<p><b>Okay enough of the build up , now let’s get straight to the point and discuss the steps for a quick and smooth transition into the SDET role.</b></p>

<p><b>1. Change your Mindset &amp; be more Curious</b>
Be ready to get out of your comfort zone &amp; learn new things! Choose your reason to keep yourself motivated.</p>

<p><b>2. Be a much better ‘tester’</b>
    The primary role of SDET role is to test and dig out hidden risks and information to ensure best quality. Start testing everything a level deeper to what you have been doing already and connect every new feature/change ticket to 3 buckets :
    <i>How is it working from a tech point of view ? <i>
    <i>How is it helping businesses to generate revenue ? <i>
    <i>How is it enhancing user experience when rolled out to production ? <i></i></i></i></i></i></i></p>

<p>Doing the above exercise will give an enormous insight of the product and what is actually expected out of it from tech, business and user point of view thus enabling you to think out of the box test scenarios and enhance the overall product quality you are working on.</p>

<p>Find new and better ways to test the product, including non-functional types of testing and thinking ahead of functional tests and checks .</p>

<p><b>3. Learn to read and write code</b>
Start small with reading and debugging others’ code to understand the logic behind the same. Refer to the developer’s PR which will eventually help you to make better test plans.</p>

<p>Once you are comfortable with reading code, start with writing small codes for simple logics. You can take help of platforms like leetcode.com for practising your coding and problem solving skills.
I know it is easier said than done , but believe me ‘ just keep practising and don’t give up’ .</p>

<p><b>4. Advocate for ‘quality’ across cross functional teams </b>
Start building communication channels with cross functional teams and enable them to build quality channels in different phases of SDLC.</p>

<p>Advocate for ‘quality is everyone’s responsibility’ and ‘test in every phase’ by shifting left and right. This will build your credibility and people will start approaching you for discussing the current gaps in quality processes .</p>

<p><b>5. Learn automation tools</b>
      If you follow the above steps, you surely would be overwhelmed by now and craving for some extra time. Now is the best time to introduce ‘Automation’ for its right purpose , to save your time from repeatable and redundant processes and test case executions.
      Pick up any one automation tool , ideally best suited for your current job role. It can be either a frontend or backend automation tool. Learn the 5W and 1H of automation by building an end to end automation project.
      Do not focus on building the best framework at this point , but clear your concepts regarding automation and focus on the use cases that automation can provide you in your journey.
      Do not get confused about which programming language or tool to pick right now. You can discuss with your mentor and start on any tool as long as it satisfies your requirement &amp; strategy.</p>

<p><b>6. Keep yourself updated </b>
This step is a continuous loop to keep yourself updated and upto the benchmark of what is happening across industry in terms of new tools, processes, ways &amp; types of testing etc.
Build your source of information and network by joining testing communities, watching tech talks , attending conferences &amp; reading blogs, books etc.</p>

<p><b>7. Communication</b>
As an SDET engineer , you are required to over-communicate and bridge the gap across all cross functional teams .
Practice all forms of communications (emails, slack, 1–1s) , send minutes of meeting after every important discussion, share regular test status updated with risks and blockers, and most importantly build relations and trust with stakeholders using the tool of communication.
And above all , “Break the invisible virtual walls that you have built around yourself” and let NO ONE underestimate your potential of learning and excelling….no one including yourself.</p>

<p><b><i>The above steps will surely put you on the right path of becoming a skilled SDET engineer &amp; a valuable employee to the organisation bringing much higher value to the table ! <i></i></i></b></p>]]></content><author><name>Raktim Sarkar</name></author><category term="sdet-blog" /><summary type="html"><![CDATA[7-Step guide to be a skilled SDET/QE. Plan the transition with these steps and know your WHY ? &amp; HOW ?]]></summary></entry></feed>